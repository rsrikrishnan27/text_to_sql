[
    {
        "timestamp": "2025-10-17T08:41:09.527895+00:00",
        "elapsed_seconds": 3.24,
        "user_query": "Compare the average solar power generation between weekdays and weekends in spring 2024.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  CASE\n    WHEN strftime('%w', Timestamp) IN ('0', '6') THEN 'Weekend'\n    ELSE 'Weekday'\n  END AS DayType,\n  AVG(Solar_Power_kW_) AS AverageSolarPower\nFROM smartgrid\nWHERE\n  strftime('%Y', Timestamp) = '2024' AND strftime('%m', Timestamp) IN ('03', '04', '05')\nGROUP BY\n  DayType;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Compare the average solar power generation between weekdays and weekends in spring 2024.\"\n"
    },
    {
        "timestamp": "2025-10-17T08:46:46.547104+00:00",
        "elapsed_seconds": 3.56,
        "user_query": "Identify peak electricity demand patterns by hour of day, comparing weekdays versus weekends, and show the average electricity price during those times.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  strftime('%H', Timestamp) AS HourOfDay,\n  CASE WHEN strftime('%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END AS DayType,\n  AVG(Power_Consumption_kW_) AS AveragePowerConsumption,\n  AVG(Electricity_Price_USD_kWh_) AS AverageElectricityPrice\nFROM smartgrid\nGROUP BY\n  HourOfDay,\n  DayType\nORDER BY\n  HourOfDay,\n  DayType;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Identify peak electricity demand patterns by hour of day, comparing weekdays versus weekends, and show the average electricity price during those times.\"\n"
    },
    {
        "timestamp": "2025-10-17T09:02:31.788275+00:00",
        "elapsed_seconds": 27.66,
        "user_query": "Analyze power consumption patterns by hour of day for each season, comparing weekdays and weekends, and show when the cost of electricity is highest",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  CASE\n    WHEN strftime('%m', Timestamp) IN ('12', '01', '02') THEN 'Winter'\n    WHEN strftime('%m', Timestamp) IN ('03', '04', '05') THEN 'Spring'\n    WHEN strftime('%m', Timestamp) IN ('06', '07', '08') THEN 'Summer'\n    ELSE 'Autumn' -- Covers '09', '10', '11'\n  END AS Season,\n  CASE\n    WHEN strftime('%w', Timestamp) IN ('0', '6') THEN 'Weekend'\n    ELSE 'Weekday'\n  END AS DayType,\n  strftime('%H', Timestamp) AS Hour,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS Average_Power_Consumption_kW,\n  ROUND(AVG(Electricity_Price_USD_kWh_), 3) AS Average_Electricity_Price_USD_kWh\nFROM smartgrid\nGROUP BY\n  CASE\n    WHEN strftime('%m', Timestamp) IN ('12', '01', '02') THEN 'Winter'\n    WHEN strftime('%m', Timestamp) IN ('03', '04', '05') THEN 'Spring'\n    WHEN strftime('%m', Timestamp) IN ('06', '07', '08') THEN 'Summer'\n    ELSE 'Autumn'\n  END,\n  CASE\n    WHEN strftime('%w', Timestamp) IN ('0', '6') THEN 'Weekend'\n    ELSE 'Weekday'\n  END,\n  strftime('%H', Timestamp)\nORDER BY\n  CASE\n    WHEN Season = 'Winter' THEN 1\n    WHEN Season = 'Spring' THEN 2\n    WHEN Season = 'Summer' THEN 3\n    WHEN Season = 'Autumn' THEN 4\n  END,\n  DayType,\n  Hour;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Analyze power consumption patterns by hour of day for each season, comparing weekdays and weekends, and show when the cost of electricity is highest\"\n"
    },
    {
        "timestamp": "2025-10-17T09:39:50.033777+00:00",
        "elapsed_seconds": 3.62,
        "user_query": "Analyze when overload conditions occur most frequently by hour of day and day of week.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  strftime('%H', Timestamp) AS HourOfDay,\n  CASE strftime('%w', Timestamp)\n    WHEN '0' THEN 'Sunday'\n    WHEN '1' THEN 'Monday'\n    WHEN '2' THEN 'Tuesday'\n    WHEN '3' THEN 'Wednesday'\n    WHEN '4' THEN 'Thursday'\n    WHEN '5' THEN 'Friday'\n    WHEN '6' THEN 'Saturday'\n  END AS DayOfWeek,\n  COUNT(*) AS OverloadCount\nFROM smartgrid\nWHERE Overload_Condition = 1\nGROUP BY HourOfDay, DayOfWeek\nORDER BY OverloadCount DESC, HourOfDay, DayOfWeek;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Analyze when overload conditions occur most frequently by hour of day and day of week.\"\n"
    },
    {
        "timestamp": "2025-10-17T09:41:36.243651+00:00",
        "elapsed_seconds": 11.79,
        "user_query": "How does high temperature affect power consumption and transformer fault frequency? Compare days above 30\u00b0C with cooler days.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  CASE\n    WHEN T.MaxDailyTemperature > 30 THEN 'High Temp Days (>30C)'\n    ELSE 'Cooler Days (<=30C)'\n  END AS Temperature_Category,\n  ROUND(AVG(T.AvgDailyPowerConsumption), 2) AS Average_Daily_Power_Consumption_kW,\n  ROUND(AVG(T.TotalDailyTransformerFaults), 2) AS Average_Daily_Transformer_Faults_Count\nFROM (\n  SELECT\n    date(Timestamp) AS Day,\n    MAX(Temperature_C_) AS MaxDailyTemperature,\n    AVG(Power_Consumption_kW_) AS AvgDailyPowerConsumption,\n    SUM(Transformer_Fault) AS TotalDailyTransformerFaults\n  FROM smartgrid\n  GROUP BY Day\n) AS T\nGROUP BY Temperature_Category;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"How does high temperature affect power consumption and transformer fault frequency? Compare days above 30\u00b0C with cooler days.\"\n"
    },
    {
        "timestamp": "2025-10-17T09:47:23.266906+00:00",
        "elapsed_seconds": 6.77,
        "user_query": "Compare the contribution of wind versus solar power by hour of day and by season.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  strftime('%H', Timestamp) AS HourOfDay,\n  CASE\n    WHEN strftime('%m', Timestamp) IN ('12', '01', '02') THEN 'Winter'\n    WHEN strftime('%m', Timestamp) IN ('03', '04', '05') THEN 'Spring'\n    WHEN strftime('%m', Timestamp) IN ('06', '07', '08') THEN 'Summer'\n    WHEN strftime('%m', Timestamp) IN ('09', '10', '11') THEN 'Autumn'\n    ELSE 'Unknown'\n  END AS Season,\n  ROUND(AVG(Wind_Power_kW_), 2) AS AverageWindPower_kW,\n  ROUND(AVG(Solar_Power_kW_), 2) AS AverageSolarPower_kW\nFROM smartgrid\nGROUP BY\n  HourOfDay,\n  Season\nORDER BY\n  CASE Season\n    WHEN 'Winter' THEN 1\n    WHEN 'Spring' THEN 2\n    WHEN 'Summer' THEN 3\n    WHEN 'Autumn' THEN 4\n    ELSE 5\n  END,\n  HourOfDay;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Compare the contribution of wind versus solar power by hour of day and by season.\"\n"
    },
    {
        "timestamp": "2025-10-17T09:49:07.112624+00:00",
        "elapsed_seconds": 2.25,
        "user_query": "When are our top 10 peak power consumption periods, and what were the environmental conditions during those times?",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  Timestamp,\n  Power_Consumption_kW_,\n  Temperature_C_,\n  Humidity_\nFROM smartgrid\nORDER BY Power_Consumption_kW_ DESC\nLIMIT 10;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"When are our top 10 peak power consumption periods, and what were the environmental conditions during those times?\"\n"
    },
    {
        "timestamp": "2025-10-17T09:50:32.207268+00:00",
        "elapsed_seconds": 2.8,
        "user_query": "Has our load prediction accuracy improved or worsened over the months? Show the mean absolute percentage error (MAPE) for each month.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(ABS(Power_Consumption_kW_ - Predicted_Load_kW_) * 100.0 / Power_Consumption_kW_), 2) AS MAPE\nFROM smartgrid\nGROUP BY Month\nORDER BY Month;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Has our load prediction accuracy improved or worsened over the months? Show the mean absolute percentage error (MAPE) for each month.\"\n"
    },
    {
        "timestamp": "2025-10-17T09:55:18.119733+00:00",
        "elapsed_seconds": 13.13,
        "user_query": "Identify times when power factor falls below 0.9, and analyze what conditions correlate with poor power factor.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  Timestamp,\n  Power_Factor,\n  Voltage_V_,\n  Current_A_,\n  Power_Consumption_kW_,\n  Reactive_Power_kVAR_,\n  Grid_Supply_kW_,\n  Solar_Power_kW_,\n  Wind_Power_kW_,\n  Overload_Condition,\n  Transformer_Fault,\n  Temperature_C_,\n  Humidity_\nFROM smartgrid\nWHERE Power_Factor < 0.9\nORDER BY Timestamp DESC\nLIMIT 100;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Identify times when power factor falls below 0.9, and analyze what conditions correlate with poor power factor.\"\n"
    },
    {
        "timestamp": "2025-10-17T09:56:34.480036+00:00",
        "elapsed_seconds": 13.4,
        "user_query": "How does humidity affect power consumption and solar power generation? Group by humidity ranges.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  CASE\n    WHEN Humidity_ >= 20 AND Humidity_ < 30 THEN '20-30%'\n    WHEN Humidity_ >= 30 AND Humidity_ < 40 THEN '30-40%'\n    WHEN Humidity_ >= 40 AND Humidity_ < 50 THEN '40-50%'\n    WHEN Humidity_ >= 50 AND Humidity_ < 60 THEN '50-60%'\n    WHEN Humidity_ >= 60 AND Humidity_ < 70 THEN '60-70%'\n    WHEN Humidity_ >= 70 AND Humidity_ < 80 THEN '70-80%'\n    ELSE 'Other'\n  END AS Humidity_Range,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS Avg_Power_Consumption_kW,\n  ROUND(AVG(Solar_Power_kW_), 2) AS Avg_Solar_Power_kW\nFROM smartgrid\nGROUP BY Humidity_Range\nORDER BY\n  CASE\n    WHEN Humidity_Range = '20-30%' THEN 1\n    WHEN Humidity_Range = '30-40%' THEN 2\n    WHEN Humidity_Range = '40-50%' THEN 3\n    WHEN Humidity_Range = '50-60%' THEN 4\n    WHEN Humidity_Range = '60-70%' THEN 5\n    WHEN Humidity_Range = '70-80%' THEN 6\n    ELSE 7\n  END;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"How does humidity affect power consumption and solar power generation? Group by humidity ranges.\"\n"
    },
    {
        "timestamp": "2025-10-17T10:00:43.536401+00:00",
        "elapsed_seconds": 20.36,
        "user_query": "What conditions most frequently precede transformer faults? Look at metrics from the hour before faults occur",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  AVG(T2.Voltage_V_) AS AvgVoltage_PreFault,\n  AVG(T2.Current_A_) AS AvgCurrent_PreFault,\n  AVG(T2.Power_Consumption_kW_) AS AvgPowerConsumption_PreFault,\n  AVG(T2.Reactive_Power_kVAR_) AS AvgReactivePower_PreFault,\n  AVG(T2.Power_Factor) AS AvgPowerFactor_PreFault,\n  AVG(T2.Voltage_Fluctuation_) AS AvgVoltageFluctuation_PreFault,\n  ROUND(AVG(T2.Overload_Condition) * 100, 2) AS OverloadFrequency_PreFault_Percent,\n  AVG(T2.Temperature_C_) AS AvgTemperature_PreFault,\n  AVG(T2.Humidity_) AS AvgHumidity_PreFault\nFROM smartgrid AS T1\nJOIN smartgrid AS T2 ON\n  T2.Timestamp < T1.Timestamp AND\n  T2.Timestamp >= datetime(T1.Timestamp, '-1 hour')\nWHERE T1.Transformer_Fault = 1;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"What conditions most frequently precede transformer faults? Look at metrics from the hour before faults occur\"\n"
    },
    {
        "timestamp": "2025-10-17T10:03:36.901414+00:00",
        "elapsed_seconds": 11.16,
        "user_query": "Is there evidence that electricity consumption decreases when prices are high? Compare consumption across different price brackets.",
        "model_name": "gemini-2.5-flash",
        "examples_enabled": true,
        "sql_output": "SELECT\n  CASE\n    WHEN Electricity_Price_USD_kWh_ < 0.2 THEN 'Low (< $0.20)'\n    WHEN Electricity_Price_USD_kWh_ >= 0.2 AND Electricity_Price_USD_kWh_ < 0.3 THEN 'Medium ($0.20 - $0.29)'\n    WHEN Electricity_Price_USD_kWh_ >= 0.3 AND Electricity_Price_USD_kWh_ < 0.4 THEN 'High ($0.30 - $0.39)'\n    ELSE 'Very High (>= $0.40)'\n  END AS Price_Bracket,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS Average_Consumption_kW\nFROM\n  smartgrid\nGROUP BY\n  Price_Bracket\nORDER BY\n  CASE\n    WHEN Price_Bracket = 'Low (< $0.20)' THEN 1\n    WHEN Price_Bracket = 'Medium ($0.20 - $0.29)' THEN 2\n    WHEN Price_Bracket = 'High ($0.30 - $0.39)' THEN 3\n    WHEN Price_Bracket = 'Very High (>= $0.40)' THEN 4\n  END ASC;",
        "prompt_used": "[ROLE: System]\nYou are a specialized SQL assistant that converts natural language questions about smart grid data into precise SQLite 3 SELECT queries only.\n\n[SECTION: Database Schema]\n{\n  \"table_name\": \"smartgrid\",\n  \"columns\": [\n    {\n      \"name\": \"Timestamp\",\n      \"type\": \"object\",\n      \"description\": \"Time of data recording in 15-minute intervals.\",\n      \"range\": {\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2025-06-04 19:45:00\"\n      }\n    },\n    {\n      \"name\": \"Voltage_V_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical voltage measurement in volts.\",\n      \"range\": {\n        \"min\": 207.6719806823556,\n        \"max\": 252.3954212551288\n      }\n    },\n    {\n      \"name\": \"Current_A_\",\n      \"type\": \"float64\",\n      \"description\": \"Electrical current measurement in amperes.\",\n      \"range\": {\n        \"min\": 5.001238845994779,\n        \"max\": 49.99964190363347\n      }\n    },\n    {\n      \"name\": \"Power_Consumption_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Active power consumption in kilowatts.\",\n      \"range\": {\n        \"min\": 1.0891776167784215,\n        \"max\": 12.103199277549075\n      }\n    },\n    {\n      \"name\": \"Reactive_Power_kVAR_\",\n      \"type\": \"float64\",\n      \"description\": \"Reactive power measurement in kilovolt-amperes reactive, indicates energy efficiency.\",\n      \"range\": {\n        \"min\": 0.1136653188609056,\n        \"max\": 4.684119129531462\n      }\n    },\n    {\n      \"name\": \"Power_Factor\",\n      \"type\": \"float64\",\n      \"description\": \"Ratio of real power to apparent power, showing efficiency of power usage (usually between 0.8 and 1.0).\",\n      \"range\": {\n        \"min\": 0.8000009557218327,\n        \"max\": 0.9999965969465038\n      }\n    },\n    {\n      \"name\": \"Solar_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from solar sources in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0001149091309049,\n        \"max\": 49.99896307093212\n      }\n    },\n    {\n      \"name\": \"Wind_Power_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power generated from wind sources in kilowatts.\",\n      \"range\": {\n        \"min\": 6.681887121606778e-05,\n        \"max\": 29.997815334304978\n      }\n    },\n    {\n      \"name\": \"Grid_Supply_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Power drawn from the electrical grid in kilowatts.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.766046003831494\n      }\n    },\n    {\n      \"name\": \"Voltage_Fluctuation_\",\n      \"type\": \"float64\",\n      \"description\": \"Measurement of voltage variability or instability in the system.\",\n      \"range\": {\n        \"min\": -4.999912912023533,\n        \"max\": 4.999946092561705\n      }\n    },\n    {\n      \"name\": \"Overload_Condition\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of system overload (1 = overload, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Transformer_Fault\",\n      \"type\": \"int64\",\n      \"description\": \"Binary indicator of transformer fault occurrence (1 = fault, 0 = normal).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0\n      }\n    },\n    {\n      \"name\": \"Temperature_C_\",\n      \"type\": \"float64\",\n      \"description\": \"Ambient temperature measurement in degrees Celsius.\",\n      \"range\": {\n        \"min\": 10.000015565336996,\n        \"max\": 39.99994944582863\n      }\n    },\n    {\n      \"name\": \"Humidity_\",\n      \"type\": \"float64\",\n      \"description\": \"Relative humidity measurement as a percentage.\",\n      \"range\": {\n        \"min\": 20.00042286473867,\n        \"max\": 79.99792263634268\n      }\n    },\n    {\n      \"name\": \"Electricity_Price_USD_kWh_\",\n      \"type\": \"float64\",\n      \"description\": \"Cost of electricity in US dollars per kilowatt-hour.\",\n      \"range\": {\n        \"min\": 0.1000020989674619,\n        \"max\": 0.4999957727741508\n      }\n    },\n    {\n      \"name\": \"Predicted_Load_kW_\",\n      \"type\": \"float64\",\n      \"description\": \"Forecasted power load in kilowatts, target variable for energy prediction.\",\n      \"range\": {\n        \"min\": 1.0434866836365604,\n        \"max\": 12.483253325324592\n      }\n    }\n  ]\n}\n\n[SECTION: Core Rules]\n1. ONLY generate SELECT statements \u2014 never INSERT, UPDATE, DELETE, DROP, CREATE, ALTER, or TRUNCATE.\n2. Use only columns that exist in the smartgrid table shown above.\n3. Use valid SQLite 3 syntax and functions only.\n4. Keep queries simple and efficient for better performance.\n5. Match column names exactly as defined in the schema.\n6. Use single quotes for string literals.\n7. Use LIMIT for queries that might return large result sets.\n8. Include proper sorting (ORDER BY) when relevant to the question.\n\n[SECTION: SQLite Function Reference]\n## DateTime Functions\n- Extract components: strftime('%%Y', Timestamp), strftime('%%m', Timestamp), strftime('%%d', Timestamp), strftime('%%H', Timestamp), strftime('%%w', Timestamp)\n- Format dates: strftime('%%Y-%%m-%%d', Timestamp), strftime('%%Y-%%m-%%d %%H:%%M:%%S', Timestamp)\n- Date calculations: date(Timestamp, '+1 day'), date(Timestamp, '-7 days'), date(Timestamp, 'start of month')\n- Time filters: WHERE date(Timestamp) = date('now', '-1 day'), WHERE Timestamp BETWEEN '2024-01-01' AND '2024-01-31'\n- Time groupings: GROUP BY date(Timestamp), GROUP BY strftime('%%Y-%%m', Timestamp), GROUP BY strftime('%%w', Timestamp)\n- Day classification: \n  * Weekday vs Weekend: CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n  * Day names: CASE WHEN strftime('%%w', Timestamp) = '0' THEN 'Sunday' WHEN strftime('%%w', Timestamp) = '1' THEN 'Monday'... END\n- Seasons: CASE WHEN strftime('%%m', Timestamp) IN ('03','04','05') THEN 'Spring' ... END\n\n## Aggregation Functions\n- AVG(column) - Calculate average value\n- COUNT(column) - Count non-NULL values\n- MAX(column) - Find maximum value\n- MIN(column) - Find minimum value\n- SUM(column) - Calculate sum of values\n- ROUND(value, decimals) - Round to specified decimal places\n\n## Analytical Patterns\n- Find peak values: ORDER BY column DESC LIMIT 1\n- Calculate percentages: 100.0 * SUM(part) / SUM(whole)\n- Compare time periods: with subqueries or self-joins\n- Running totals: use window functions if available or subqueries\n- Time-based patterns: GROUP BY strftime('%%H', Timestamp) to find hourly patterns\n- Day type analysis: GROUP BY CASE WHEN strftime('%%w', Timestamp) IN ('0','6') THEN 'Weekend' ELSE 'Weekday' END\n\n[SECTION: Example Inputs and Queries]\n\nExample 1:\nQ: \"What was the average power consumption for each hour of the day?\"\n<SQL>\nSELECT \n  strftime('%H', Timestamp) AS Hour,\n  AVG(Power_Consumption_kW_) AS AvgPowerConsumption\nFROM smartgrid\nGROUP BY Hour\nORDER BY Hour;\n</SQL>\n\nExample 2:\nQ: \"Find days with transformer faults when temperature was above 30 degrees\"\n<SQL>\nSELECT \n  date(Timestamp) AS Day,\n  MAX(Temperature_C_) AS MaxTemperature,\n  COUNT(*) AS FaultCount\nFROM smartgrid\nWHERE \n  Transformer_Fault = 1 \n  AND Temperature_C_ > 30\nGROUP BY Day\nORDER BY Day;\n</SQL>\n\nExample 3:\nQ: \"Compare the percentage of power from renewable sources by month in 2024\"\n<SQL>\nSELECT\n  strftime('%Y-%m', Timestamp) AS Month,\n  ROUND(AVG(Power_Consumption_kW_), 2) AS AvgConsumption,\n  ROUND(AVG(Solar_Power_kW_ + Wind_Power_kW_), 2) AS AvgRenewable,\n  ROUND(100.0 * AVG(Solar_Power_kW_ + Wind_Power_kW_) / AVG(Power_Consumption_kW_), 2) AS RenewablePercentage\nFROM smartgrid\nWHERE strftime('%Y', Timestamp) = '2024'\nGROUP BY Month\nORDER BY Month;\n</SQL>\n\n\n[SECTION: Output Format]\nOutput only the SQL query without explanation. Wrap your response in <SQL> tags as shown:\n\n<SQL>\nSELECT ...\n</SQL>\n\n[SECTION: Task]\nGenerate a valid SQLite 3 SELECT query for the following user question:\n\"Is there evidence that electricity consumption decreases when prices are high? Compare consumption across different price brackets.\"\n"
    }
]